---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    keyname: "jenkins"
    inventory_path: "{{ playbook_dir }}/inventory"
    cloud_name: "public_cloud"
    boot_timeout: "{{ lookup('env', 'BOOT_TIMEOUT') | default(900, true) }}"
  tasks:

    - name: Create inventory directory
      file:
        path: "{{ inventory_path }}"
        state: directory

    # regions, and fallback_regions should be CSV strings
    # We randomly shuffle them both, then use the first
    # item of the resulting lists for the try/rescue block.

    - name: Create primary region list
      set_fact:
        # replace: replace commas with spaces. Double spaces will be removed by trim or select.
        # split on spaces to produce a list
        # trim: remove spaces from beginning and end of each item
        # upper: convert to upper case
        # select: remove empty strings from the list
        # shuffle: randomise order
        regions_shuff: >-
          {{- (regions | replace(',', ' ')).split() | map('trim') | map('upper') | select | shuffle }}

    - name: Create fallback region list
      set_fact:
        # if there is only one item in the list, use it - even if it's in the first list
        # otherwise, use the difference filter to exclude the first item in regions_shuff
        # because that region has already failed
        fallback_regions_shuff: >-
          {%- set region_list = (fallback_regions | replace(',', ' ')).split() | map('trim') | map('upper') | select | shuffle %}
          {{- (region_list | length == 1) | ternary(region_list, region_list | difference([regions_shuff[0]])) }}

    - name: Determine the latest image name when required
      when:
        - image is match('^nodepool-.*')
      block:
        - name: Get the list of images
          os_image_facts:
            cloud: "{{ cloud_name }}"
            region_name: "{{ regions_shuff[0] }}"
          register: _images

        - name: Set the image name fact
          set_fact:
            _image: "{{ _images.ansible_facts.openstack_image | json_query('[*].name') | select('match', image ~ '*') | list | sort | last }}"

    - name: Provision a cloud instance
      block:
        - name: Output the primary region list
          debug:
            msg: "Job-provided primary regions: {{ regions }}; Resulting shuffled regions: {{ regions_shuff }}"

        - name: Fail when no primary regions are provided
          fail:
            msg: "No primary regions were provided. Please review job configuration."
          when:
            - regions_shuff | length == 0

        - name: Provision a cloud instance (first primary region)
          os_server:
            name: "{{ instance_name }}"
            flavor: "{{ flavor }}"
            state: present
            cloud: "{{ cloud_name }}"
            region_name: "{{ regions_shuff[0] }}"
            image: "{{ _image | default(image) }}"
            key_name: "{{ keyname }}"
            security_groups: []
            userdata: "{{ lookup('file', playbook_dir ~ '/../scripts/user_data_pubcloud.sh') }}"
            config_drive: yes
            meta:
              build_config: core
            wait: yes
            timeout: "{{ boot_timeout }}"
          register: _instance_provision

        - name: Write inventory
          copy:
            content: |
              [job_nodes:children]
              hosts

              [hosts]
              {{ _instance_provision.server.name }} ansible_host={{ _instance_provision.server.accessIPv4 }} ansible_user=root rax_region={{ _instance_provision.server.region }}
            dest: '{{ inventory_path }}/hosts'

        - name: Wait for SSH connectivity to the cloud instance (10 min timeout)
          wait_for:
            timeout: 600
            port: 22
            host: "{{ _instance_provision.server.accessIPv4 }}"
            sleep: 10
            search_regex: "OpenSSH"

      rescue:
        - name: Ensure first attempt instance is removed.
          os_server:
            name: "{{ instance_name }}"
            state: absent
            cloud: "{{ cloud_name }}"
            region_name: "{{ regions_shuff[0] }}"
            wait: yes
            timeout: "{{ boot_timeout }}"

        - name: Output the fallback region list
          debug:
            msg: "Job-provided secondary regions: {{ fallback_regions }}; Resulting shuffled regions: {{ fallback_regions_shuff }}"

        - name: Fail when no fallback regions are provided
          fail:
            msg: "No fallback regions were provided. Please review job configuration."
          when:
            - fallback_regions_shuff | length == 0

        - name: Provision a cloud instance (first fallback region)
          os_server:
            name: "{{ instance_name }}"
            flavor: "{{ flavor }}"
            state: present
            cloud: "{{ cloud_name }}"
            region_name: "{{ fallback_regions_shuff[0] }}"
            image: "{{ _image | default(image) }}"
            key_name: "{{ keyname }}"
            security_groups: []
            userdata: "{{ lookup('file', playbook_dir ~ '/../scripts/user_data_pubcloud.sh') }}"
            config_drive: yes
            meta:
              build_config: core
            wait: yes
            timeout: "{{ boot_timeout }}"
          register: _instance_provision

        - name: Write inventory
          copy:
            content: |
              [job_nodes:children]
              hosts

              [hosts]
              {{ _instance_provision.server.name }} ansible_host={{ _instance_provision.server.accessIPv4 }} ansible_user=root rax_region={{ _instance_provision.server.region }}
            dest: '{{ inventory_path }}/hosts'

        - name: Wait for SSH connectivity to the fallback cloud instance (10 min timeout)
          wait_for:
            timeout: 600
            port: 22
            host: "{{ _instance_provision.server.accessIPv4 }}"
            sleep: 10
            search_regex: "OpenSSH"

    - name: Show results of instance provision task
      debug:
        var: _instance_provision

    - name: Add Host
      add_host:
        hostname: "singleuseslave"
        ansible_ssh_host: "{{ _instance_provision.server.accessIPv4 }}"

    - name: Show generated inventory
      debug:
        msg: "Generated inventory: {{ lookup('file', inventory_path+'/hosts')}}"

    - name: Wait for host preparation to complete
      pause:
        minutes: 5
